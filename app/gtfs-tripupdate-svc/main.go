package main

import (
	"fmt"
	"github.com/OpenTransitTools/transitcast/app/gtfs-tripupdate-svc/tripupdate"
	"github.com/ardanlabs/conf"
	"github.com/nats-io/nats.go"
	logger "log"
	"os"
	"os/signal"
	"syscall"
)

var build = "develop"

func main() {
	log := logger.New(os.Stdout, "GTFS_TRIPUPDATE_SVC : ", logger.LstdFlags|logger.Lmicroseconds|logger.Lshortfile)
	if err := run(log); err != nil {
		log.Printf("main: error: %v", err)
		os.Exit(1)
	}
}

func run(log *logger.Logger) error {
	var cfg struct {
		conf.Version
		Args conf.Args
		NATS struct {
			URL string `conf:"default:localhost"`
		}
		ExpireTripUpdateSeconds int    `conf:"default:120"`
		HttpPort                int    `conf:"default:8080"`
		PredictionSubject       string `conf:"default:trip-update-prediction" help:"NATS subject for trip-updates generated by aggregator"`
	}
	cfg.Version.SVN = build
	cfg.Version.Desc = "Serve predicted trip updates over http"
	const prefix = "GTFS_TRIPUPDATE_SVC"
	if err := conf.Parse(os.Args[1:], prefix, &cfg); err != nil {
		switch err {
		case conf.ErrHelpWanted:
			usage, err := conf.Usage(prefix, &cfg)
			if err != nil {
				return fmt.Errorf("generating config usage: %w", err)
			}
			printUsage(usage)
			return nil
		case conf.ErrVersionWanted:
			version, err := conf.VersionString(prefix, &cfg)
			if err != nil {
				return fmt.Errorf("generating config version: %w", err)
			}
			fmt.Println(version)
			return nil
		}
		return fmt.Errorf("parsing config: %w", err)
	}

	// =========================================================================
	// App Starting

	// Print the build version for our logs. Also expose it under /debug/vars.
	log.Printf("main : Started : Application initializing : version %s", build)
	defer log.Println("main: Completed")

	out, err := conf.String(&cfg)
	if err != nil {
		return fmt.Errorf("generating config for output: %w", err)
	}
	log.Printf("main: Config :\n%v\n", out)

	// =========================================================================
	// Start NATS

	log.Printf("main: Connecting to NATS\n")
	natsConnection, err := nats.Connect(cfg.NATS.URL)
	if err != nil {
		return fmt.Errorf("unable to establish connection to nats server: %w", err)
	}
	defer func() {
		log.Printf("main: closing connection to NATS")
		natsConnection.Close()
	}()

	// Make a channel to listen for an interrupt or terminate signal from the OS.
	// Use a buffered channel because the signal package requires it.
	shutdown := make(chan os.Signal, 1)
	signal.Notify(shutdown, os.Interrupt, syscall.SIGTERM)

	tripupdate.StartServices(log, cfg.ExpireTripUpdateSeconds, cfg.HttpPort, natsConnection,
		cfg.PredictionSubject, shutdown)

	return nil

}

func printUsage(confUsage string) {
	fmt.Println(confUsage)
}
